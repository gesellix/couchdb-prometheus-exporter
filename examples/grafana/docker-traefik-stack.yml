version: '3.7'

volumes:
  prometheus_data: {}
  grafana_data: {}

networks:
  monitor-net:
    driver: overlay
    name: inbound
  traefik:
    driver: overlay
    name: traefik
  couchdb-cluster:
    driver: overlay
    name: couchdbs

services:
  traefik:
    image: traefik:v2.1.6
    command:
      - "--log.level=DEBUG"
      - "--api=true"
      - "--api.insecure=true"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--providers.docker=true"
      - "--providers.docker.swarmmode=true"
      - "--providers.docker.watch=true"
    networks:
      - traefik
      - monitor-net
      - couchdb-cluster
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: ingress
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  couchdb0:
    image: couchdb:1.7.2
    environment:
      - "COUCHDB_USER=${COUCHDB_USER:-root}"
      - "COUCHDB_PASSWORD=${COUCHDB_PASSWORD:-a-secret}"
    ports:
      - "4895:5984"
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  couchdb1:
    image: couchdb:3.3.2
    command: -name couchdb@couchdb1 -setcookie thecookie
    environment:
      - "COUCHDB_USER=${COUCHDB_USER:-root}"
      - "COUCHDB_PASSWORD=${COUCHDB_PASSWORD:-a-secret}"
      - "COUCHDB_SECRET=${COUCHDB_SECRET:-123456}"
    networks:
      couchdb-cluster:
      monitor-net:
    ports:
      - "15984:5984"
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  couchdb2:
    image: couchdb:3.3.2
    command: -name couchdb@couchdb2 -setcookie thecookie
    environment:
      - "COUCHDB_USER=${COUCHDB_USER:-root}"
      - "COUCHDB_PASSWORD=${COUCHDB_PASSWORD:-a-secret}"
      - "COUCHDB_SECRET=${COUCHDB_SECRET:-123456}"
    networks:
      couchdb-cluster:
      monitor-net:
    ports:
      - "25984:5984"
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  couchdb3:
    image: couchdb:3.3.2
    command: -name couchdb@couchdb3 -setcookie thecookie
    environment:
      - "COUCHDB_USER=${COUCHDB_USER:-root}"
      - "COUCHDB_PASSWORD=${COUCHDB_PASSWORD:-a-secret}"
      - "COUCHDB_SECRET=${COUCHDB_SECRET:-123456}"
    networks:
      couchdb-cluster:
      monitor-net:
    ports:
      - "35984:5984"
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  couchdbstats1:
    image: "gesellix/couchdb-prometheus-exporter:${COUCHDB_EXPORTER_VERSION:-latest}"
    command: --couchdb.uri=http://couchdb1:5984 --logtostderr --databases=_all_dbs
    environment:
      - "COUCHDB_USERNAME=${COUCHDB_USER:-root}"
      - "COUCHDB_PASSWORD=${COUCHDB_PASSWORD:-a-secret}"
    networks:
      couchdb-cluster:
      monitor-net:
    ports:
      - "9984:9984"
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  couchdbstats2:
    image: "gesellix/couchdb-prometheus-exporter:${COUCHDB_EXPORTER_VERSION:-latest}"
    command: --couchdb.uri=http://couchdb2:5984 --logtostderr --databases=_all_dbs
    environment:
      - "COUCHDB_USERNAME=${COUCHDB_USER:-root}"
      - "COUCHDB_PASSWORD=${COUCHDB_PASSWORD:-a-secret}"
    networks:
      couchdb-cluster:
      monitor-net:
    ports:
      - "9985:9984"
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  cluster-setup:
    image: gesellix/couchdb-cluster-config:v17.2.8
    command: setup --delay 10s --timeout 30s --username ${COUCHDB_USER:-root} --password ${COUCHDB_PASSWORD:-a-secret} -nodes couchdb1 -nodes couchdb2 -nodes couchdb3
    networks:
      couchdb-cluster:
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  prometheus:
    image: prom/prometheus:v2.13.1
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitor-net
    deploy:
      placement:
        constraints:
          - node.role==manager
      labels:
        - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
        - "traefik.docker.network=traefik"
      restart_policy:
        condition: on-failure

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - monitor-net
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - "./alertmanager/:/etc/alertmanager/"
    networks:
      - monitor-net
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    deploy:
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8088:8080
    networks:
      - monitor-net
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - grafana/config.monitoring
    networks:
      - monitor-net
    user: "104"
    deploy:
      placement:
        constraints:
          - node.role==manager
      labels:
        - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
        - "traefik.docker.network=traefik"
      restart_policy:
        condition: on-failure
